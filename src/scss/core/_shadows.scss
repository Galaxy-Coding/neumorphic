$variant: '';
$firstColor: #000;

@each $name, $value in $theme-colors {
  @for $i from 1 through 3 {
    @if $i == 1 {
      $firstColor: $value;
    }
    @if $i == 2 {
      $variant: 'lighten';
      $value: lighten($value, 5%);
    } @else if $i == 3 {
      $variant: 'darken';
      $value: darken($value, 5%);
    }
    // FAIRE LES VARIANTS DE BACKGROUNDS
    // je fais un darken qui prend la nouvelle value, r√©init la value avant
    .neu-#{$name} {
      @if $i == 1 {
        background-color: $firstColor;
        color: txtColor($firstColor);
        .btn:hover {
          @if txtColor($firstColor) == #fff {
            filter: brightness(115%);
          } @else if txtColor($firstColor) == #000 {
            filter: brightness(95%);
          }
        }
      }

      .neu-flat {
        background-color: $value;
        box-shadow: 5px 5px 10px darken($value, 8%), -5px -5px 10px lighten($value, 8%);

        &.neu-small {
          box-shadow: 2px 2px 10px darken($value, 12.5%), -2px -2px 10px lighten($value, 10%);
        }

        &.neu-large {
          box-shadow: 12px 12px 24px darken($value, 8%), -12px -12px 24px lighten($value, 8%);
        }
      }

      .neu-pressed {
        background-color: $value;
        box-shadow: inset 5px 5px 10px darken($value, 8%), inset -5px -5px 10px lighten($value, 6%);

        &.neu-small {
          box-shadow: inset 2px 2px 10px darken($value, 10%), inset -2px -2px 10px lighten($value, 7%);
        }

        &.neu-large {
          box-shadow: inset 8px 8px 20px darken($value, 8%), inset -8px -8px 20px lighten($value, 6%);
        }
      }

      .neu-convex {
        background: linear-gradient(145deg, lighten($value, 7%), darken($value, 6%));
        box-shadow: 5px 5px 10px darken($value, 8%), -5px -5px 10px lighten($value, 6%);

        &.neu-small {
          background: linear-gradient(145deg, lighten($value, 7%), darken($value, 6%));
          box-shadow: 2px 2px 10px darken($value, 10%), -2px -2px 10px lighten($value, 7%);
        }

        &.neu-large {
          background: linear-gradient(145deg, lighten($value, 7%), darken($value, 6%));
          box-shadow: 8px 8px 16px darken($value, 8%), -8px -8px 16px lighten($value, 7%);
        }
      }

      .neu-concave {
        background: linear-gradient(145deg, darken($value, 6%), lighten($value, 6%));
        box-shadow: 5px 5px 10px darken($value, 8%), -5px -5px 10px lighten($value, 6%);

        &.neu-small {
          background: linear-gradient(145deg, darken($value, 6%), lighten($value, 6%));
          box-shadow: 2px 2px 10px darken($value, 10%), -2px -2px 10px lighten($value, 7%);
        }

        &.neu-large {
          background: linear-gradient(145deg, darken($value, 6%), lighten($value, 6%));
          box-shadow: 8px 8px 14px darken($value, 8%), -8px -8px 14px lighten($value, 7%);
        }
      }

      .neu-bordered {
        background-color: $value;
        border: solid 2px transparent;
        box-shadow: inset 5px 5px 10px darken($value, 8%), inset -5px -5px 10px lighten($value, 6%),
          5px 5px 10px darken($value, 8%), -5px -5px 10px lighten($value, 6%);

        &.neu-small {
          border: solid thin transparent;
          box-shadow: inset 2px 2px 10px darken($value, 10%), inset -2px -2px 10px lighten($value, 7%),
            2px 2px 10px darken($value, 10%), -2px -2px 10px lighten($value, 7%);
        }

        &.neu-large {
          border: solid 4px transparent;
          box-shadow: inset 8px 8px 20px darken($value, 8%), inset -8px -8px 20px lighten($value, 7%),
            8px 8px 20px darken($value, 8%), -8px -8px 20px lighten($value, 7%);
        }
      }
    }
    @if $i == 2 {
      $value: $firstColor;
    }
  }
}
